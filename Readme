Quadtree Image Compression

Overview
This project implements an image compression algorithm using a quadtree structure. It processes images by recursively subdividing them into quadrants and encoding the image data in a hierarchical format.

Features

Reads binary image files.

Constructs a quadtree representation of the image.

Computes and stores image statistics.

Outputs results in a structured format.

File Structure

quadtree.c - Main entry point for handling input arguments and processing images.

functions.c - Contains core functions for quadtree construction and image analysis.

struct.h - Defines the data structures used for the quadtree representation.

Makefile - Defines build rules for compiling the project.

Data Structures
The project uses the following data structures defined in struct.h:

RGB struct: Represents the color of a pixel using red, green, and blue values.

Nod struct: Represents a node in the quadtree, storing color data and pointers to child nodes.

Arbore type: A pointer to a Nod, representing the quadtree itself.

Main Functions
The project includes several functions for processing images and building the quadtree:

calred, calgreen, calblue - Compute the average red, green, and blue values in a given region.

divizare - Determines whether a region should be further divided.

insert_nod - Recursively constructs the quadtree.

numarare - Counts the number of leaf nodes in the quadtree.

zona_maxima - Finds the largest uniform region in the quadtree.

nivel - Computes the depth of the quadtree.

Compilation
To compile the project, run:
make
This will generate the executable file.

Usage
To run the program, use one of the following commands:
./quadtree -c1  <input_file> <output_file>

-c1 builds the quadtree and outputs image statistics.

 sets the quadtree division sensitivity.

<input_file> specifies the input binary image.

<output_file> specifies where to save the output data.

Alternatively, to run a different mode:
./quadtree -c2 <input_file> <output_file>

-c2 executes another mode (to be detailed further based on implementation).

Dependencies

Standard C libraries stdlib.h, stdio.h, math.h, string.h.

Future Improvements

Implement additional compression techniques.

Optimize memory usage and processing speed.

Add support for more image formats.

Improve error handling and debugging tools.

License
This project is open-source and available under the MIT License.

Authors
Developed by Lungu Andrei
